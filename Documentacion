public void movimiento()
            Tiene 3 partes principales --> introducir, comprobar, mover
            introducir:: el jugador introduce las posiciones (anterior y posterior)
            comprobar:: el programa comprueba si la pieza puede mover a la casilla
            mover:: el programa cambia la posicion de la pieza (actualizar el tablero)

public boolean puedeMover(int[] posicion_antes, int[] posicion_despues)
            Es para comprobar si la pieza de posicion_antes puede mover a la posicion_despues
            Debajo de esta funcion hay varios 'hijos', como:: puedeMoverPeon, puedeMoverCaballo...
            int[] posicion_antes: la posicion de la pieza que quiere mover
            int[] posicion_despues: la posicion de la casilla donde quiere moverse
                  return true: se puede
                  return false: no se puede

public boolean puedeMoverPeon(int[] posicion_antes, int[] posicion_despues)
            Es para comprobar si el movimiento de peon es correto
            Logica(Blanco):: Si Ya==2, puede mover 1 o 2 casillas arriba, sino solo puede mover 1 casilla
            Logica(Negro):: Si Ya==7, puede mover 1 o 2 casillas abajo, sino solo puede mover 1 casilla
            int[] posicion_antes: la posicion de la pieza que quiere mover
            int[] posicion_despues: la posicion de la casilla donde quiere moverse
                  return true: se puede
                  return false: no se puede

public boolean puedeMoverTorre(int[] posicion_antes, int[] posicion_despues)
            Es para comprobar si el movimiento de torre es correto
            Logica:: Si (Ya==Yp || Xa==Xp) && (no hay nada entre posicion_antes y posicion_despues), bien
            int[] posicion_antes: la posicion de la pieza que quiere mover
            int[] posicion_despues: la posicion de la casilla donde quiere moverse
                  return true: se puede
                  return false: no se puede

public boolean puedeMoverCaballo(int[] posicion_antes, int[] posicion_despues)
            Es para comprobar si el movimiento de caballo es correto
            Logica:: Si (diferencia_x * diferencia_y == 2||-2), bien
            int[] posicion_antes: la posicion de la pieza que quiere mover
            int[] posicion_despues: la posicion de la casilla donde quiere moverse
                  return true: se puede
                  return false: no se puede

public boolean puedeMoverAlfil(int[] posicion_antes, int[] posicion_despues)
            Es para comprobar si el movimiento de alfil es correto
            Logica:: Si ((diferencia_x == diferencia_y) || (diferencia_x == -diferencia_y)) && (no hay nada medio), bien
            int[] posicion_antes: la posicion de la pieza que quiere mover
            int[] posicion_despues: la posicion de la casilla donde quiere moverse
                  return true: se puede
                  return false: no se puede

public boolean puedeMoverQueen(int[] posicion_antes, int[] posicion_despues)
            Es para comprobar si el movimiento de reina es correto
            Logica:: Si va como torre, puedeMoverTorre(). Si va como alfil, puedeMoverAlfil()
            int[] posicion_antes: la posicion de la pieza que quiere mover
            int[] posicion_despues: la posicion de la casilla donde quiere moverse
                  return true: se puede
                  return false: no se puede

public boolean puedeMoverKing(int[] posicion_antes, int[] posicion_despues)
            Es para comprobar si el movimiento de rey es correto
            Logica:: si (distancia_x <= 1) && (distancia_y <= 1), bien
            int[] posicion_antes: la posicion de la pieza que quiere mover
            int[] posicion_despues: la posicion de la casilla donde quiere moverse
                  return true: se puede
                  return false: no se puede

public boolean jaque(char color_jugador_a, char color_jugador_b, int[] posicion_rey_b)
            Es para comprobar si el jugador_b esta en jaque
            O sea que hay una pieza (o mÃ¡s) de jugador_a puede matar el rey de jugador_b
            char color_jugador_a: el color del jugador_a, 'B' o 'N'
            char color_jugador_b: el color del jugador_b, 'B' o 'N'
            int[] posicion_rey_b: la posicion del rey del jugador_b
                  return true: el jugador_b esta en jaque
                  return false: el jugador_b no esta en jaque

public int[] introducirPosicion(String mensaje)
            Es para conseguir una posicion de tablero, int[2], {X,Y}
            String mensaje: el mensaje que quieres mostrar antes de introducir la posicion
                  return int[]: la posicion que el jugador introduce

public void mostrarTableroBlanco()
            Es para mostrar el tablero des de la vista de jugador blanco

public void mostrarTableroNegro()
            Es para mostrar el tablero des de la vista de jugador negro

public boolean entreUnoOcho(int n)
            Es para comprobar si el numero n es 1-8
            int n: el numero que quieres comprobar
                  true: 1<=n<=8
                  false: n<1 || n > 8

public boolean esSuPieza(int[] posicion)
            Es para comprobar si la pieza que esta en la posicion es una pieza de jugador
            int[] posicion: la posicion que quieres comprobar
                  true: es su pieza
                  false: no es su pieza

public char introducirPiezaCoronacion()
            Es para conseguir el tipo de pieza en caso de coronacion
            Opciones:: [T]torre, [C]caballo, [Q]Reina, [A]Alfil

